# 
# Code 2
# cryptography
# des 
# https://en.wikipedia.org/wiki/Data_Encryption_Standard
# Valentino Skobljanec
#


L1:=[[1,1,0,0],[1,1,0,0],[0,0,0,0],[0,0,0,0],[1,1,0,0],[1,1,0,0],[1,1,1,1],[1,1,1,1]];
R1:=[[1,1,1,1],[0,0,0,0],[1,0,1,0],[1,0,1,0],[1,1,1,1],[0,0,0,0],[1,0,1,0],[1,0,1,0]];
K2:=[[0,0,0,1,1,0],[1,1,0,0,0,0],[0,0,1,0,1,1],[1,0,1,1,1,1],[1,1,1,1,1,1],[0,0,0,1,1,1],[0,0,0,0,0,1],[1,1,0,0,1,0]];

f:=function(R1,K2)
local ETable, i, j, k, div, R, result, help1, help2, P, matrix, i1, i2, j1, B, S, new, x, y, tmp, binary;
matrix:=NullMat(8,4);
new:=NullMat(8,4);
S:=[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]];
R:=NullMat(8,6);
P:=[[16,7,20,21],[29,12,28,17],[1,15,23,26],[5,18,31,10],[2,8,24,14],[32,27,3,9],[19,13,30,6],[22,11,4,25]];
result:=NullMat(8,6);
ETable:=[[32,1,2,3,4,5],[4,5,6,7,8,9],[8,9,10,11,12,13],[12,13,14,15,16,17],[16,17,18,19,20,21],[20,21,22,23,24,25],[24,25,26,27,28,29],[28,29,30,31,32,1]];
i1:=Length(ETable);
j1:=Length(ETable[1]);
for i in [1..i1] do
    for j in [1..j1] do
        if ETable[i][j] mod 4 = 0 then
            help2:=4;
        else
            help2:=ETable[i][j] mod 4;
            if help2 = 0 then
                help2:=4;
            fi;
        fi; 
        help1:=ETable[i][j]/4 - (ETable[i][j] mod 4) / 4;
        if ETable[i][j] mod 4 <> 0 then
            help1:=help1+1;
        fi;
        R[i][j]:=R1[help1][help2];
    od;
od;
i2:=Length(result);
for i in [1..i2] do
    for j in [1..6] do
        result[i][j]:=(K2[i][j] + R[i][j]) mod 2;
    od;
od;
B:=NullMat(1,8)[1];
B[1]:=[0,0,0,0,0,1];
B[2]:=[0,0,0,0,1,1];
B[3]:=[0,0,0,1,0,1];
B[4]:=[0,0,1,0,0,1];
B[5]:=[0,1,0,0,0,1];
B[6]:=[1,0,0,0,0,1];
B[7]:=[0,0,1,1,0,1];
B[8]:=[0,1,0,1,0,1];

binary:=NullMat(1,4)[1];
for j in [1..Length(B)] do
    tmp:=S[2*B[i][1]+B[i][6]+1][8*B[1][2]+4*B[1][3]+2*B[1][4]+B[1][5]+1];
    k:=1;
    div:=8;
    while k < 5 do
        if tmp / div >= 1 then
            binary[k]:=1;
        else 
            binary[k]:=0;
        fi;
        tmp:=tmp-div;
        div:=div/2;
        k:=k+1;
    od;
    k:=1;
    for k in [1..4] do
        matrix[j][k]:=binary[k];
    od;
od;

for i in [1..8] do
    for j in [1..4] do
        if P[i][j] mod 4 = 0 then
            help2:=4;
        else
            help2:=P[i][j] mod 4;
        fi; 
        help1:=P[i][j]/4 - (P[i][j] mod 4) / 4;
        if P[i][j] mod 4 <> 0 then
            help1:=help1+1;
        fi;
        new[i][j]:=matrix[help1][help2];
    od;
od;

return new;
end;

solver:=function(L1,R1,K2)
local L2, R2, i, j, F, i1, j1;
L2:=R1;
R2:=R1;
F:=f(R1,K2);
i1:=Length(R1);
j1:=Length(R1[1]);
for i in [1..i1] do
    for j in [1..j1] do
        R2[i][j]:=(L1[i][j] + F[i][j]) mod 2;
    od;
od;
	return [L2,R2];
end;
