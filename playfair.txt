# 
# Code 1
# cryptography
# playfair method
# https://en.wikipedia.org/wiki/Playfair_cipher
# Valentino Skobljanec
#

# function for converting letters to upper case
# ignores spaces and special characters 
uppercase:=function(string)
local result, temp, i;
# final result
result:="";
for i in [1..Length(string)] do
    # representing charachter number in ascii table
    temp:=IntChar(string[i]);
    # if letter is small
    if temp >= 97 and temp <= 122 then
        # make upper
        Add(result,CharInt(temp-32));
    # if uppercase letter add
    elif temp >= 65 and temp <= 97 then
        Add(result,CharInt(temp));
    fi;
od;
return result;
end;

# cipher function
# x i y represents elements of block
# m represent matrix for encrypting
# hi i hj represent places in matrix m where is "IJ" located
cipher:=function(x,y,m,hi,hj)
local i, j, i1, i2, j1, j2, result, tmp;
result:="";
# searching for place in matrix m 
# where x and y are located
for i in [1..5] do
    for j in [1..5] do 
        # when we find them
        # we save their indexes
        if x = m[i][j] then
            i1:=i;
            j1:=j;
        elif y = m[i][j] then 
            i2:=i;
            j2:=j;
        # if we are at "IJ" position
        # we have to check differently
        elif i = hi and j = hj then
            if x = m[i][j][1] or x = m[i][j][2] then
                i1:=i;
                j1:=j;
            elif y = m[i][j][1] or y = m[i][j][2] then
                i2:=i;
                j2:=j;
            fi;
        fi;
    od;
od;
# if same row
if i1 = i2 then
    # cyclic one position right
    j1:=j1+1;
    j2:=j2+1;
    # watch for the indexes
    if j1 = 6 then
        j1:=1;
    elif j2 = 6 then
        j2:=1;
    fi;
    # apend to result
    Append(result,[m[i1][j1],m[i2][j2]]); 
# if same column
elif j1 = j2 then
    # cyclic one place down
    i1:=i1+1;
    i2:=i2+1;
    # watch for the indexes
    if i1 = 6 then
        i1:=1;
    elif i2 = 6 then
        i2:=1;
    fi;
    # append to result
    Append(result,[m[i1][j1],m[i2][j2]]);
else 
    # we take other two corners of rectangle
    # made by elements x and y 
    tmp:=j1;
    j1:=j2;
    # append to result
    Append(result,[m[i1][j1],m[i2][tmp]]);
fi;
return result;
end;

playfair:=function(text, key)
local m, used, alp, i, j, k, len, help, tmp, it, result, string, l, t, counter, hi, hj;
# english alphabet
alp:="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
# list of already used letters for m 
used:="";
# final result
result:="";
# temporary result
string:="";
# empthy matrix for filling 
m:=[[,,,,],[,,,,],[,,,,],[,,,,],[,,,,]];
# fixing text and key 
text:=uppercase(text);
key:=uppercase(key);
# temporary text
tmp:="";
# counter for placed letters
# between two same letters in the block
counter:=0;
# add first
Add(tmp, text[1]);
for it in [2..Length(text)] do
    # checking if adjacent letters are same 
    if text[it-1] = text[it] and (it + counter) mod 2 = 0 then
        # if they are we put something between
        if text[it-1] = 'X' then 
            Add(tmp, 'Y');
        else
            Add(tmp, 'X');
        fi;
        Add(tmp, text[it]);
        counter:=counter + 1;
    else 
        Add(tmp, text[it]);
    fi; 
od;
text:=tmp;
# if text has odd length we add one element
if Length(text) mod 2 <> 0 then
    if text[Length(text)] = 'X' then 
        Add(text, 'Y');
    else
        Add(tmp, 'X');
    fi;
fi;
len:=Length(key);
k:=1;
help:=1;
for i in [1..5] do
    for j in [1..5] do 
        # while we have elements of key 
        if k <= len then
            # watch for the indexes
            while key[k] in used and k + 1 <= len do 
                k:=k+1;
            od;
            # if we have used all element of key
            if k + 1 > len and key[k] in used then
                # adding unused elements of alphabeth
                while alp[help] in used do
                    help:=help+1;
                od;
                # if we have to add 'I' or 'J'
                # we add "IJ"
                # and save hi, hj
                if alp[help] = 'I' or alp[help] = 'J' then
                    Add(used,'I');
                    Add(used,'J');
                    m[i][j]:="IJ";
                    hi:=i;
                    hj:=j;
                else
                    Add(used, alp[help]);
                    m[i][j]:=alp[help];
                fi;
                # increment iterator of alphabet
                help:=help+1;
            else
                # if we have to add 'I' or 'J'
                # we add "IJ"
                # and save hi, hj
                if key[k] = 'I' or key[k] = 'J' then
                    Add(used,'I');
                    Add(used,'J');
                    m[i][j]:="IJ";
                    hi:=i;
                    hj:=j; 
                else
                    Add(used, key[k]);
                    m[i][j]:=key[k];
                fi;
            fi; 
        # if we have used the key
        # we continue with the rest of the alphabet
        else
            while alp[help] in used do
                help:=help+1;
            od;
            # if we have to add 'I' or 'J'
            # we add "IJ"
            # and save hi, hj
            if alp[help] = 'I' or alp[help] = 'J' then
                Add(used,'I');
                Add(used,'J');
                m[i][j]:="IJ";
                hi:=i;
                hj:=j;
            else
                Add(used, alp[help]);
                m[i][j]:=alp[help];
            fi;
            # increment iterator of alphabet
            help:=help+1;
        fi;
        k:=k+1;
    od;
od;
t:=Length(text);
for l in [1..t] do
    # we take them by blocks 
    if l mod 2 = 1 then
        # and cipher
        Add(string,cipher(text[l],text[l+1],m,hi,hj));
    fi;
od;
# for loop is used to not have
# output format ['A','IJ','C']
# but "AIJC"
for l in [1..Length(string)] do
    if string[l][1] = "IJ" then 
        Add(result,string[l][1][1]);
        Add(result,string[l][1][2]);
    else
        Add(result,string[l][1]);
    fi;
    if string[l][2] = "IJ" then 
        Add(result,string[l][2][1]);
        Add(result,string[l][2][2]);
    else
        Add(result,string[l][2]);
    fi;
od;
return result;
end;
